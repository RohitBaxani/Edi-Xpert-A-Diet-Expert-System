{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADING, LOGIN_SUCCESS, REGISTER_SUCCESS, LOGOUT, GET_PROFILE_DATA, UPDATE_PROFILE_DATA, GET_ERRORS } from './types';\n\n// check the token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // user loading\n  dispatch({\n    type: USER_LOADING\n  });\n  //get token from the state\n\n  const token = getState().auth.token;\n\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // if token add to headers config\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  axios.get('http://localhost:8000/api/auth/user', config).then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\n\n// login user\nexport const login = (username, password) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // request body\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post('http://localhost:8000/api/auth/login', body, config).then(res => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\nexport const register = (username, password) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // request body\n  const body = JSON.stringify({\n    username,\n    password\n  });\n  axios.post('http://localhost:8000/api/auth/register', body, config).then(res => {\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\nexport const logout = () => (dispatch, getState) => {\n  //headers\n  const config = configureConfig(getState);\n  axios.post('http://localhost:8000/api/auth/logout', null, config).then(res => {\n    dispatch({\n      type: LOGOUT\n      //payload:res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\nexport const getProfileData = () => (dispatch, getState) => {\n  const config = configureConfig(getState);\n  axios.get('http://localhost:8000/api/profile', config).then(res => {\n    dispatch({\n      type: GET_PROFILE_DATA,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\nexport const updateProfileData = calories => (dispatch, getState) => {\n  const config = configureConfig(getState);\n  const body = JSON.stringify({\n    \"daily_calories\": calories\n  });\n  axios.put('http://localhost:8000/api/profile', body, config).then(res => {\n    dispatch({\n      type: UPDATE_PROFILE_DATA,\n      payload: res.data\n    });\n  }).catch(err => {\n    const errors = {\n      msg: err.response.data,\n      status: err.response.status\n    };\n    dispatch({\n      type: GET_ERRORS,\n      payload: errors\n    });\n  });\n};\n// helper function\nconst configureConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n};","map":{"version":3,"names":["axios","USER_LOADED","USER_LOADING","LOGIN_SUCCESS","REGISTER_SUCCESS","LOGOUT","GET_PROFILE_DATA","UPDATE_PROFILE_DATA","GET_ERRORS","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","errors","msg","response","status","login","username","password","body","JSON","stringify","post","register","logout","configureConfig","getProfileData","updateProfileData","calories","put"],"sources":["E:/Final Project/frontend/src/actions/auth.js"],"sourcesContent":["import axios from 'axios'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    LOGIN_SUCCESS,\n    REGISTER_SUCCESS,\n    LOGOUT,\n    GET_PROFILE_DATA,\n    UPDATE_PROFILE_DATA,\n    GET_ERRORS\n} from './types'\n\n\n// check the token and load user\n\nexport const loadUser = () => (dispatch,getState) => {\n    // user loading\n    dispatch({\n        type:USER_LOADING\n    })\n    //get token from the state\n\n    const token = getState().auth.token\n\n    //headers\n    const config = {\n        headers: {\n            'Content-Type':'application/json',\n        }\n    }\n\n    // if token add to headers config\n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`\n    }\n\n    axios.get('http://localhost:8000/api/auth/user',config)\n        .then(res => {\n            dispatch({\n                type:USER_LOADED,\n                payload:res.data\n            })\n        }).catch(err => {\n            const errors = {\n                msg:err.response.data,\n                status:err.response.status\n            }\n            dispatch({\n                type:GET_ERRORS,\n                payload:errors\n            })\n        })\n}\n\n\n// login user\nexport const login = (username,password) => dispatch => {\n    //headers\n    const config = {\n        headers: {\n            'Content-Type':'application/json',\n        }\n    }\n\n    // request body\n    const body = JSON.stringify({username,password})\n\n    axios.post('http://localhost:8000/api/auth/login',body,config)\n        .then(res => {\n            dispatch({\n                type:LOGIN_SUCCESS,\n                payload:res.data\n            })\n        }).catch(err => {\n            const errors = {\n                msg:err.response.data,\n                status:err.response.status\n            }\n            dispatch({\n                type:GET_ERRORS,\n                payload:errors\n            })\n        })\n}\n\nexport const register = (username,password) => dispatch => {\n\n    //headers\n    const config = {\n        headers: {\n            'Content-Type':'application/json',\n        }\n    }\n\n    // request body\n    const body = JSON.stringify({username,password})\n\n    axios.post('http://localhost:8000/api/auth/register',body,config)\n        .then(res => {\n            dispatch({\n                type:REGISTER_SUCCESS,\n                payload:res.data\n            })\n        }).catch(err => {\n            const errors = {\n                msg:err.response.data,\n                status:err.response.status\n            }\n            dispatch({\n                type:GET_ERRORS,\n                payload:errors\n            })\n        })\n}\n\nexport const logout = () => (dispatch,getState) => {\n    //headers\n    const config = configureConfig(getState)\n    \n    axios.post('http://localhost:8000/api/auth/logout',null,config)\n        .then(res => {\n            dispatch({\n                type:LOGOUT,\n                //payload:res.data\n            })\n        }).catch(err => {\n            const errors = {\n                msg:err.response.data,\n                status:err.response.status\n            }\n            dispatch({\n                type:GET_ERRORS,\n                payload:errors\n            })\n        })\n}\n\nexport const getProfileData = () => (dispatch,getState) => {\n    const config = configureConfig(getState)\n    axios.get('http://localhost:8000/api/profile',config)\n    .then(res=>{\n        dispatch({\n            type:GET_PROFILE_DATA,\n            payload:res.data\n        })\n    }).catch(err=>{\n        const errors = {\n            msg:err.response.data,\n            status:err.response.status\n        }\n        dispatch({\n            type:GET_ERRORS,\n            payload:errors\n        })\n    })\n}\n\nexport const updateProfileData = (calories) => (dispatch,getState) => {\n    const config = configureConfig(getState)\n    const body = JSON.stringify({\"daily_calories\":calories})\n    axios.put('http://localhost:8000/api/profile',body,config)\n    .then(res=>{\n        dispatch({\n            type:UPDATE_PROFILE_DATA,\n            payload:res.data\n        })\n    }).catch(err=>{\n        const errors = {\n            msg:err.response.data,\n            status:err.response.status\n        }\n        dispatch({\n            type:GET_ERRORS,\n            payload:errors\n        })\n    })\n}\n// helper function\nconst configureConfig = (getState) => {\n    const token = getState().auth.token\n\n    const config = {\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    \n    if (token) {\n        config.headers['Authorization'] = `Token ${token}`\n    }\n\n    return config\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}